stages:
  - docker build
  - maintenance
  - maintenance triggers
  - server deploy
  - server destroy

variables:
  VAULT_KEY_TRANQUE_DEV: secret/tranque/dev/ssh/keys/tranque-dev
  VAULT_KEY_TRANQUE_DEV_US_EAST_1: secret/tranque/dev/ssh/keys/tranque-dev-us-east-1
  VAULT_KEY_TRANQUE_DEV_US_WEST_1: secret/tranque/dev/ssh/keys/tranque-dev-us-west-1
  VAULT_KEY_TRANQUE_DEV_US_WEST_2: secret/tranque/dev/ssh/keys/tranque-dev-us-west-2
  VAULT_KEY_TRANQUE_PROD_US_EAST_2: secret/tranque/dev/ssh/keys/tranque-prod-us-east-2
  VAULT_KEY_TRANQUE_QA: secret/tranque/dev/ssh/keys/tranque-qa
  VAULT_KEY_TRANQUE_CT: secret/tranque/dev/ssh/keys/tranque-ct
  VAULT_KEY_TRANQUE_EMAC_QA: secret/tranque/dev/ssh/keys/tranque-emac-qa
  VAULT_KEY_TRANQUE_DPAIS_QA: secret/tranque/dev/ssh/keys/tranque-dpais-qa
  VAULT_KEY_TRANQUE_EF_QA: secret/tranque/dev/ssh/keys/tranque-ef-qa
  VAULT_KEY_TRANQUE_DEV_INRIA: secret/tranque/dev/ssh/keys/tranque-dev-inria
  VAULT_KEY_TRANQUE_SSL_WILDCARD: secret/tranque/dev/ssl/certs/wildcard.observatorioderelaves.cl
  VAULT_KEY_TRANQUE_SSL_QA_WILDCARD: secret/tranque/dev/ssl/certs/wildcard.qa.observatorioderelaves.cl
  VAULT_KEY_TRANQUE_SSL: secret/tranque/dev/ssl/certs/observatorioderelaves.cl
  VAULT_MONOLITH_KEYS_ROOT: secret/tranque/dev/monoliths/keys/aes-256-cbc/
  VAULT_KEY_ACR_CREDENTIALS: secret/tranque/dev/registries/acr
  TRANQUE_DEV_INRIA_HOST: 146.83.70.25
  INRIA_SISTEMAS: sistemas@inria.cl
  LETSENCRYPT_EMAIL_DEV: kai.klingenberg@inria.cl
  DOCKER_TLS_CERTDIR: "/certs"

.docker_build_push_except: &docker_build_push_except
  except:
    # everything but {branches, pushes, tags, merge_requests}
    - api
    - external
    - pipelines
    - schedules
    - triggers
    - web

.docker_build_push_dind_setup: &docker_build_push_dind_setup
  tags:
    - docker
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind

.docker_build_push_before_script: &docker_build_push_before_script
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"

.docker_build_push_gitlab: &docker_build_push_gitlab |
  docker build -t "${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}:${CI_COMMIT_REF_SLUG}" docker-images/${CI_JOB_NAME}
  docker push "${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}:${CI_COMMIT_REF_SLUG}"


# Build jobs

cron:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/cron/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

elasticsearch:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/elasticsearch/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

kibana:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/kibana/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

logstash:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/logstash/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - |
      if [ "${CI_COMMIT_REF_SLUG}" = "dev" ]
      then
        export CI_COMMIT_REF_SLUG=master
      fi
    - *docker_build_push_gitlab

proxy:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/proxy/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

ts-stats:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/ts-stats/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

secure-proxy:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/secure-proxy/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

storage:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/storage/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

blackbox-exporter:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/blackbox-exporter/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

terraform-ansible:
  stage: docker build
  only:
    refs:
      - dev
    changes:
      - docker-images/terraform-ansible/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

rabbitmq:
  stage: docker build
  only:
    refs:
      - master
      - /^dev.*$/
      - tags
    changes:
      - docker-images/rabbitmq/*
  <<: *docker_build_push_except
  <<: *docker_build_push_dind_setup
  <<: *docker_build_push_before_script
  script:
    - *docker_build_push_gitlab

# Maintenance jobs

renew-ssl:
  stage: maintenance
  image:
    name: certbot/dns-route53
    entrypoint: ['']
  only:
    variables:
      - $MAINTENANCE == "ssl"
  before_script:
    - apk add --no-cache --update ca-certificates
    - wget -q https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
    - unzip -q vault_1.2.3_linux_amd64.zip
    - rm -f vault_1.2.3_linux_amd64.zip
    - mv vault /usr/bin/vault
  script:
    # Obtain a certificate through the dns-01 challenge, as documented
    # here: https://certbot-dns-route53.readthedocs.io/en/stable/
    - certbot certonly --dns-route53
                       --dns-route53-propagation-seconds 120
                       -n
                       --agree-tos
                       -m $LETSENCRYPT_EMAIL_DEV
                       -d "observatorioderelaves.cl"
                       -d "www.observatorioderelaves.cl"
    # Save certificate and key to vault
    - vault write $VAULT_KEY_TRANQUE_SSL
                  "cert=$(cat /etc/letsencrypt/live/*/fullchain.pem)"
                  "key=$(cat /etc/letsencrypt/live/*/privkey.pem)"

renew-ssl-wildcard:
  stage: maintenance
  image:
    name: certbot/dns-route53
    entrypoint: ['']
  only:
    variables:
      - $MAINTENANCE == "ssl-wildcard"
  before_script:
    - apk add --no-cache --update ca-certificates
    - wget -q https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
    - unzip -q vault_1.2.3_linux_amd64.zip
    - rm -f vault_1.2.3_linux_amd64.zip
    - mv vault /usr/bin/vault
  script:
    # Obtain a certificate through the dns-01 challenge, as documented
    # here: https://certbot-dns-route53.readthedocs.io/en/stable/
    - certbot certonly --dns-route53
                       --dns-route53-propagation-seconds 120
                       -n
                       --agree-tos
                       -m $LETSENCRYPT_EMAIL_DEV
                       -d "*.observatorioderelaves.cl"
    # Save certificate and key to vault
    - vault write $VAULT_KEY_TRANQUE_SSL_WILDCARD
                  "cert=$(cat /etc/letsencrypt/live/*/fullchain.pem)"
                  "key=$(cat /etc/letsencrypt/live/*/privkey.pem)"

renew-ssl-qa-wildcard:
  stage: maintenance
  image:
    name: certbot/dns-route53
    entrypoint: ['']
  only:
    variables:
      - $MAINTENANCE == "ssl-qa-wildcard"
  before_script:
    - apk add --no-cache --update ca-certificates
    - wget -q https://releases.hashicorp.com/vault/1.2.3/vault_1.2.3_linux_amd64.zip
    - unzip -q vault_1.2.3_linux_amd64.zip
    - rm -f vault_1.2.3_linux_amd64.zip
    - mv vault /usr/bin/vault
  script:
    # Obtain a certificate through the dns-01 challenge, as documented
    # here: https://certbot-dns-route53.readthedocs.io/en/stable/
    - certbot certonly --dns-route53
                       --dns-route53-propagation-seconds 120
                       -n
                       --agree-tos
                       -m $LETSENCRYPT_EMAIL_DEV
                       -d "*.qa.observatorioderelaves.cl"
    # Save certificate and key to vault
    - vault write $VAULT_KEY_TRANQUE_SSL_QA_WILDCARD
                  "cert=$(cat /etc/letsencrypt/live/*/fullchain.pem)"
                  "key=$(cat /etc/letsencrypt/live/*/privkey.pem)"

build-monolithic-package:
  stage: maintenance
  tags:
    - docker
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  only:
    variables:
      - $MAINTENANCE == "assemble-monolith"
  services:
    - docker:19.03.0-dind
  before_script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # decrypt secrets files (env vars) and protected folders
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
  script:
    # test preconditions
    - test -n "$TEMPLATE"
    - test -n "$MANIFEST"
    - test -n "$CONFIGURATION"
    - test -n "$ENCRYPTION_KEY_NAME"
    # read or generate key
    - key=$(vault read -field=key "${VAULT_MONOLITH_KEYS_ROOT}${ENCRYPTION_KEY_NAME}" || :)
    - |
      if [ -z "${key}" ]
      then
          key=$(openssl rand -base64 32)
          echo "${key}" | vault write "${VAULT_MONOLITH_KEYS_ROOT}${ENCRYPTION_KEY_NAME}" key=-
      fi
    - echo "${key}" > keyfile
    # assemble
    - monoliths/assemble.sh "monoliths/templates/${TEMPLATE}"
                            "monoliths/manifests/${MANIFEST}"
                            "monoliths/configurations/${CONFIGURATION}"
                            keyfile
    # save to s3 repository
    - aws s3 cp "tranque.${TEMPLATE}.${MANIFEST}.${CONFIGURATION}.tgz"
                "s3://dev-tranque-monoliths/tranque.${TEMPLATE}.${MANIFEST}.${CONFIGURATION}.tgz"

save-image-to-acr:
  stage: maintenance
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  only:
    refs:
      - dev
    variables:
      - $MAINTENANCE == "push-to-acr"
  services:
    - docker:19.03.0-dind
  <<: *docker_build_push_before_script
  script:
    - test -n "$SOURCE_IMAGE"
    - test -n "$TARGET_REGISTRY"
    - test -n "$TARGET_IMAGE"
    - export DOCKER_LOGIN=$(vault read -field=login "${VAULT_KEY_ACR_CREDENTIALS}/${TARGET_REGISTRY}")
    - export DOCKER_PASSWORD=$(vault read -field=password "${VAULT_KEY_ACR_CREDENTIALS}/${TARGET_REGISTRY}")
    - docker login -u "$DOCKER_LOGIN" -p "$DOCKER_PASSWORD" "$TARGET_REGISTRY"
    - docker pull "$SOURCE_IMAGE"
    - docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
    - docker push "$TARGET_IMAGE"

# Deployment jobs

deploy-generic-qa:
  stage: server deploy
  only:
    variables:
      - $DEPLOY == "generic-qa"
  tags:
    - deploy
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # configure ssh
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # read private key from vault
    - echo "$(vault read -field=key ${VAULT_KEY_TRANQUE_DEV_US_WEST_1})" | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa
    - cp ~/.ssh/id_rsa ~/.ssh/tranque-dev-us-west-1.pem
    # decrypt secrets files (env vars)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
  script:
    # test preconditions
    - test -n "$TARGET_HOST"
    - test -n "$MONOLITH"
    - test -n "$MONOLITH_KEY"
    - test -n "$NAMESPACE"
    # assemble required files
    - aws s3 cp "s3://dev-tranque-monoliths/${MONOLITH}" monolith.tgz
    - vault read -field key "${VAULT_MONOLITH_KEYS_ROOT}${MONOLITH_KEY}" > monolith-keyfile
    - vault read -field cert "${VAULT_KEY_TRANQUE_SSL_QA_WILDCARD}" > fullchain.pem
    - vault read -field key "${VAULT_KEY_TRANQUE_SSL_QA_WILDCARD}" > privkey.pem
    - echo >> fullchain.pem
    - echo >> privkey.pem
    - echo "$NAMESPACE" > namespace
    # interpolate variables into terraform spec
    - sed -i "s/__REPLACED_TARGET_HOST__/${TARGET_HOST}/g" docker-stacks/generic-qa/terraform/plan.tf
    # prepare terraform with AWS provider and S3 as storage for TF state
    - terraform init docker-stacks/generic-qa/terraform
    # create infrastructure using terraform
    - terraform apply
                -auto-approve
                -var-file=docker-stacks/generic-qa/terraform/plan.tfvars
                docker-stacks/generic-qa/terraform
    # refresh state
    - terraform refresh
                -var-file=docker-stacks/generic-qa/terraform/plan.tfvars
                docker-stacks/generic-qa/terraform
    # wait a while
    - sleep 60
    # copy files over
    - scp docker-stacks/generic-qa/deploy.sh
          monolith.tgz
          monolith-keyfile
          fullchain.pem
          privkey.pem
          docker-stacks/generic-qa/docker-login.sh.secret
          namespace
          "ubuntu@${TARGET_HOST}:."
    # schedule init script
    - ssh "ubuntu@${TARGET_HOST}" bash -c 'batch < deploy.sh'

dev-observatorioderelaves-cl-aws:
  stage: server deploy
  environment:
    name: dev.observatorioderelaves.cl
    url: https://dev.observatorioderelaves.cl
  only:
    - dev-aws
  except:
    refs:
      # everything but {pipelines, web, branches, tags}
      - api
      - external
      - pushes
      - schedules
      - triggers
      - merge_requests
    variables:
      - $DEPLOY
      - $DESTROY
      - $MAINTENANCE
  tags:
    - deploy
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # configure ssh
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # read private key from vault
    - echo "$(vault read -field=key ${VAULT_KEY_TRANQUE_DEV_US_EAST_1})" | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa
    - cp ~/.ssh/id_rsa ~/.ssh/tranque-dev-us-east-1.pem
    # decrypt secrets files (env vars)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
    # install ansible requirements
    - ansible-galaxy install -r docker-stacks/dev.observatorioderelaves.cl/ansible/galaxy/docker-requirements.yml
  script:
    - |
        if [ "$PROVISION" = "yes" ] || [ "$PROVISION" = "YES" ] || [ "$PROVISION" = "y" ] || [ "$PROVISION" = "Y" ] || [ "$PROVISION" = "true" ]
        then
          # prepare terraform with AWS provider and S3 as storage for TF state
          terraform init docker-stacks/dev.observatorioderelaves.cl/terraform
          # create infrastructure using terraform
          terraform apply -auto-approve -var-file=docker-stacks/dev.observatorioderelaves.cl/terraform/plan.tfvars docker-stacks/dev.observatorioderelaves.cl/terraform
          # run again because of EIP addresses problem with TF state: https://github.com/hashicorp/terraform/issues/1425
          terraform refresh -var-file=docker-stacks/dev.observatorioderelaves.cl/terraform/plan.tfvars docker-stacks/dev.observatorioderelaves.cl/terraform
          # wait a while
          sleep 60
          # download terraform state file
          aws s3 cp s3://tranque-terraform-state/dev.observatorioderelaves.cl/terraform.tfstate .
          # run ansible playbooks
          TF_STATE=./terraform.tfstate ansible-playbook --inventory-file=/usr/bin/terraform-inventory docker-stacks/dev.observatorioderelaves.cl/ansible/playbooks/main-configure-infrastructure.yml
          TF_STATE=./terraform.tfstate ansible-playbook --inventory-file=/usr/bin/terraform-inventory docker-stacks/dev.observatorioderelaves.cl/ansible/playbooks/main-deploy-docker.yml
        else
          # update terraform state file, in case some EC2 IP addresses had changed (for example, from a reboot)
          terraform init docker-stacks/dev.observatorioderelaves.cl/terraform
          terraform refresh -var-file=docker-stacks/dev.observatorioderelaves.cl/terraform/plan.tfvars docker-stacks/dev.observatorioderelaves.cl/terraform
          # download terraform state file
          aws s3 cp s3://tranque-terraform-state/dev.observatorioderelaves.cl/terraform.tfstate .
          # run ansible playbooks
          TF_STATE=./terraform.tfstate ansible-playbook --inventory-file=/usr/bin/terraform-inventory docker-stacks/dev.observatorioderelaves.cl/ansible/playbooks/main-deploy-docker.yml
        fi

dev-observatorioderelaves-cl:
  stage: server deploy
  environment:
    name: dev.observatorioderelaves.cl
    url: https://dev.observatorioderelaves.cl
  only:
    - dev
  except:
    refs:
      # everything but {pipelines, web, branches, tags}
      - api
      - external
      - pushes
      - schedules
      - triggers
      - merge_requests
    variables:
      - $DEPLOY
      - $DESTROY
      - $MAINTENANCE
  tags:
    - deploy
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # configure ssh
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # read private key from vault
    - echo "$(vault read -field=key ${VAULT_KEY_TRANQUE_DEV_INRIA})" | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa
    # decrypt secrets files (env vars)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
  script:
    # copy SSL cert and key from vault
    - vault read -field cert "${VAULT_KEY_TRANQUE_SSL_WILDCARD}"
            > docker-stacks/dev.observatorioderelaves.cl/proxy/fullchain.pem
    - vault read -field key "${VAULT_KEY_TRANQUE_SSL_WILDCARD}"
            > docker-stacks/dev.observatorioderelaves.cl/proxy/privkey.pem
    # add an empty line to both (this is an encoding issue with vault)
    - echo >> docker-stacks/dev.observatorioderelaves.cl/proxy/fullchain.pem
    - echo >> docker-stacks/dev.observatorioderelaves.cl/proxy/privkey.pem
    # copy files to server
    - rsync -az docker-stacks/dev.observatorioderelaves.cl/* "tranque@${TRANQUE_DEV_INRIA_HOST}:~/tranque"
    # execute deploy script
    - ssh "tranque@${TRANQUE_DEV_INRIA_HOST}" "~/tranque/deploy.sh inria $(cat docker-stacks/registry-key.secret)"

tracktec.inria.cl:
  stage: server deploy
  variables:
    # use "clone" strategy to prevent "git-crypt not found" error
    # while performing a fetch on an already existing repo.  this job
    # runs on a custom private runner the image used during
    # clone/fetch does not have git-crypt installed
    GIT_STRATEGY: clone
  only:
    refs:
      - dev
  except:
    refs:
      # everything but {pipelines, web, branches, tags}
      - api
      - external
      - pushes
      - schedules
      - triggers
      - merge_requests
    variables:
      - $DEPLOY
      - $DESTROY
      - $MAINTENANCE
  # tags:
  #   - tranque-runner
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # configure ssh
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # decrypt secrets files (env vars and .pem file)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
    - chmod 0600 docker-stacks/tracktec.inria.cl/deploy_key.pem
    - chmod +x docker-stacks/tracktec.inria.cl/deploy.sh
  script:
    # copy tracktec files to server
    - rsync -az
            -e "ssh -i docker-stacks/tracktec.inria.cl/deploy_key.pem"
            docker-stacks/tracktec.inria.cl
            tranque@tracktec.inria.cl:~/config
    # execute deploy script
    - ssh -i docker-stacks/tracktec.inria.cl/deploy_key.pem
          tranque@tracktec.inria.cl
          "~/config/tracktec.inria.cl/deploy.sh ${CI_JOB_TOKEN} ${CI_REGISTRY}"

gitlab-runner-bastion:
  stage: server deploy
  only:
    refs:
      - dev
      - master
    variables:
      - $DEPLOY == "runner"
  tags:
    - docker
    - shared
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # configure ssh
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # read private key from vault
    - echo "$(vault read -field=key ${VAULT_KEY_TRANQUE_DEV_US_WEST_1})" | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa
    - cp ~/.ssh/id_rsa ~/.ssh/tranque-dev-us-west-1.pem
    # decrypt secrets files (env vars)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
    # install ansible requirements
    - ansible-galaxy install -r docker-stacks/gitlab-runner-bastion/ansible/galaxy/docker-requirements.yml
  script:
    # prepare terraform with AWS provider and S3 as storage for TF state
    - terraform init docker-stacks/gitlab-runner-bastion/terraform
    # create infrastructure using terraform
    - terraform apply -auto-approve docker-stacks/gitlab-runner-bastion/terraform
    # run again because of EIP addresses problem with TF state: https://github.com/hashicorp/terraform/issues/1425
    - terraform refresh docker-stacks/gitlab-runner-bastion/terraform
    # wait a while
    - sleep 60
    # download terraform state file
    - aws s3 cp s3://tranque-terraform-state/gitlab-runner-bastion/terraform.tfstate .
    # run ansible playbooks
    - TF_STATE=./terraform.tfstate ansible-playbook
                                   --inventory-file=/usr/bin/terraform-inventory
                                   docker-stacks/gitlab-runner-bastion/ansible/playbooks/00-install-docker.yml
    - TF_STATE=./terraform.tfstate ansible-playbook
                                   --inventory-file=/usr/bin/terraform-inventory
                                   docker-stacks/gitlab-runner-bastion/ansible/playbooks/10-create-tls-certs.yml
    - TF_STATE=./terraform.tfstate ansible-playbook
                                   --inventory-file=/usr/bin/terraform-inventory
                                   docker-stacks/gitlab-runner-bastion/ansible/playbooks/20-install-gitlab-runner.yml

# Destruction jobs

destroy-generic-qa:
  stage: server destroy
  only:
    variables:
      - $DESTROY == "generic-qa"
  tags:
    - deploy
  image: registry.gitlab.com/inria-chile/tranque/config/terraform-ansible:dev
  before_script:
    # decrypt secrets files (env vars)
    - vault read -field key secret/tranque/dev/git-crypt/config | base64 -d | git-crypt unlock -
  script:
    # test preconditions
    - test -n $TARGET_HOST
    # interpolate variables into terraform spec
    - sed -i "s/__REPLACED_TARGET_HOST__/${TARGET_HOST}/g" docker-stacks/generic-qa/terraform/plan.tf
    # prepare terraform with AWS provider and S3 as storage for TF state
    - terraform init docker-stacks/generic-qa/terraform
    # refresh state so that destruction actually destroys the right things
    - terraform refresh
                -var-file=docker-stacks/generic-qa/terraform/plan.tfvars
                docker-stacks/generic-qa/terraform
    # destroy infrastructure using terraform
    - terraform destroy
                -auto-approve
                -var-file=docker-stacks/generic-qa/terraform/plan.tfvars
                docker-stacks/generic-qa/terraform
