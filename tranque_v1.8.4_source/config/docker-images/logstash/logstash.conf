input {
  redis {
    type => "raw"
    data_type => "list"
    host => "${REDIS_HOST}"
    key => "${REDIS_KEY}"
  }
}

filter {
  ruby {
    code => "event.set('labels', event.get('labels').concat([{:key => 'type', :value => event.get('type')}]))"
  }

  aggregate {
    task_id => "%{name}"
    code => "
      map['events'] ||= Array.new;
      map['events'].push({
        :@timestamp => event.get('@timestamp'),
        :value => event.get('value'),
        :name => event.get('name'),
        :coords => event.get('coords'),
        :labels => event.get('labels'),
        :meta => event.get('meta')
      });
    "
    push_map_as_event_on_timeout => true
    timeout_task_id_field => "name"
    timeout => 20 # seconds
    timeout_code => "event.set('type', 'timeframe');"
  }
}

output {
  if [type] == "raw" {
    elasticsearch {
      hosts => "${ELASTICSEARCH_PROTOCOL}://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"
      index => "raw-%{+YYYY.MM}" # partition in months
      template => "/usr/share/logstash/es-templates/timeseries.json"
      template_name => "timeseries"
      template_overwrite => true
    }
  } else if [type] == "timeframe" {
    rabbitmq {
      exchange => "${AMQP_EXCHANGE}"
      exchange_type => "topic"
      host => "${AMQP_HOST}"
      port => "${AMQP_PORT}"
      user => "${AMQP_USERNAME}"
      password => "${AMQP_PASSWORD}"
      vhost => "${AMQP_VHOST}"
      key => "${AMQP_TOPIC}"
    }
  }
}
