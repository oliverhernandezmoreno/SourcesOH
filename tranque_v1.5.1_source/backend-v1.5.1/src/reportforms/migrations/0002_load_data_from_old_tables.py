# Generated by Django 2.1 on 2019-11-02 01:40

from django.db import migrations
from django.db import connection


def fetch_table(table):
    with connection.cursor() as cursor:
        cursor.execute(
            "SELECT COUNT(*) AS count "
            "FROM information_schema.tables "
            "WHERE table_schema = 'public' AND "
            "table_name = %s",
            [table],
        )
        if cursor.fetchone()[0] == 0:
            return []
        cursor.execute(f"SELECT * FROM {table}")
        columns = [col[0] for col in cursor.description]
        return [
            dict(zip(columns, row))
            for row in cursor.fetchall()
        ]


def raw_insert(table, data):
    with connection.cursor() as cursor:
        keys, values = zip(*data.items())
        cursor.execute(
            f"INSERT INTO {table} ({', '.join(keys)}) "
            f"VALUES ({', '.join('%s' for _ in values)})",
            list(values),
        )


def drop_tables(*tables):
    with connection.cursor() as cursor:
        for table in tables:
            cursor.execute(f"DROP TABLE IF EXISTS {table} CASCADE")


def restore_sequences(*tables):
    with connection.cursor() as cursor:
        for table in tables:
            cursor.execute(
                f"SELECT setval('{table}_id_seq', coalesce(max(id), 0) + 1, false) "
                f"FROM {table}"
            )


def load_from_old_models(apps, schema_editor):
    """Copy whatever can be found on old models, then delete those old
    models, and finally any content type linked to those models.

    """
    ReportForm = apps.get_model("reportforms", "ReportForm")
    ReportFormVersion = apps.get_model("reportforms", "ReportFormVersion")
    ReportFormInstance = apps.get_model("reportforms", "ReportFormInstance")
    FormCase = apps.get_model("reportforms", "FormCase")
    FormCaseComment = apps.get_model("reportforms", "FormCaseComment")

    for reportform in fetch_table("e700_reportform"):
        ReportForm.objects.create(**reportform)
    for reportformversion in fetch_table("e700_reportformversion"):
        ReportFormVersion.objects.create(**reportformversion)
    for reportforminstance in fetch_table("e700_reportforminstance"):
        ReportFormInstance.objects.create(**reportforminstance)
    for formcase in fetch_table("e700_formcase"):
        FormCase.objects.create(**formcase)
    for formcasecomment in fetch_table("e700_formcasecomment"):
        FormCaseComment.objects.create(**formcasecomment)
    for relation_pair in fetch_table("e700_reportforminstance_documents"):
        raw_insert(ReportFormInstance.documents.through._meta.db_table, relation_pair)
    for relation_pair in fetch_table("e700_formcase_documents"):
        raw_insert(FormCase.documents.through._meta.db_table, relation_pair)

    restore_sequences(
        "reportforms_formcasecomment",
        "reportforms_reportforminstance_documents",
        "reportforms_formcase_documents",
    )

    drop_tables(
        "e700_formsession",
        "e700_formcasecomment",
        "e700_formcase_documents",
        "e700_formcase",
        "e700_reportforminstance_documents",
        "e700_reportforminstance",
        "e700_reportformversion",
        "e700_reportform",
    )

    ContentType = apps.get_model("contenttypes", "ContentType")
    ContentType.objects.filter(app_label="e700").delete()


def do_nothing(apps, schema_editor):
    "This is a one-way migration"
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('reportforms', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_from_old_models, do_nothing),
    ]
